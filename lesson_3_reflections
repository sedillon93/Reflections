When would you want to use a remote repository rather than keeping all your work local?

  You would want to use a remote repository if you are collaborating with other people
  on the project so that you can access each other's changes as they are ready. You may
  also want to use a remote repository if you will not always be using the same computer
  to work on the project so that you can still access it from anywhere.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

  There could be changes made to the remote version that you do not want to include in
  your code right now, or that you don't need yet, like if someone else is working on
  the same program.
  
Describe the differences between forks, clones, and branches. When would you use one instead of another?

  A fork and clone are very similar; they create a copy of the repository that you select. The difference
  is that a clone can be from local to local or from local to remote, while a fork is from remote to remote
  (Git to Git). A branch is a set of commits in the repository which are connected by parent commits. There
  can be multiple branches. You might want to use a fork when there is already a repository online that you
  would like to use but don't have access to or don't want to change the original. A clone is useful because it
  works on both remote and local repositories, and can be used to get a copy of a remote repository into your
  local work space.

What is the benefit of having a copy of the last known state of the remote stored locally?

  It allows for fast forward merging when you use git pull.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  Without using Git or GitHub I would probably work on files locally and then have to send them to the
  other person/people I was working with via email or some other method of sending them the files. This
  would be harder because it would be very easy for all of our files to get out of sync and could create
  a number of conflicts when we tried to merge the files into one cohesive program. I can't think of any
  instances where this system is easier than Git or Github.
  
When would you want to make changes in a separate branch rather than directly in master? What benefits 
does each approach have?

  One reason you would want to make changes in a separate branch is if you are not sure you want to add 
  that code yet. For example, you could be collaborating and want your partners to review the code first
  or are testing out a feature and it still has some bugs. Some advantages to this are that others can
  check your code and you won't break the master branch.
  
