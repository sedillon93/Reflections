What happens when you initialize a repository? Why do you need to do it?

    When you initialize the repository an empty git file is created within the folder
    you selected. You need to do this because you will then be able to use git for
    version control. Unless you tell the computer to make a git file, it will not
    make the file and you will be unable to use git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is where the files are while you are editing them before you
    submit a commit. The repository holds the past and present versions of the files
    so it keeps a record of the commits made. The working directory is what holds the
    files that you will be working on but only one version. The staging area is beneficial
    because it allows you to pull out the files you want to change, make edits, and
    then submit the commits instead of having to submit the files to the repository
    one at a time.

How can you use the staging area to make sure you have one commit per logical
change?

    After you add the changed file to the staging area you can use the command
    git diff to compare the file in the staging area to the file in the working
    directory. You could then see if there are many differences and you have made
    lots of changes between commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Using branches could be helpful when you are trying out a new feature that
    you are not sure will work yet. That way you can keep the working file separate
    from the testing file until the feature is finalized, and then merge the two.
    It would also be useful if you want to have different versions available of
    your program, such as using different languages, having different layouts, or
    having different levels of difficulty for a game.

How do the diagrams help you visualize the branch structure?

    The diagrams help visualize the branch structure because you can see where the
    branches diverge from the master branch. This helps you see how the different
    commits in the branches are related, what commits will be visible in a git log
    and what commits are unreachable if you are in Detached Head state.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result of merging branches is that all of the commits are then on a single
    branch. This means that any changes made to either branch previously, unless
    there is a conflict, will be present in the new branch. It is represented by
    two lines converging in the diagram because that is what is happening; two
    branches are coming together to make one new one that can trace back through
    the commits of either branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
